data_complete = na.omit(data)
model1 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data_complete)
summary(model1)
#copy data set
data3 = data2
#Mean imputation for numeric missing values
mean.imp <- function (a)
{ missing <- is.na(a)
a.obs <- a[!missing]
imputed <- a
imputed[missing] <- mean(a.obs)
return (imputed)
}
data3['training_hours']=mean.imp(data3['training_hours'])
#Mode imputation for the categorical variables
mode <- function (a)
{ ta =table(a)
tam = max(ta)
if(all(ta==tam))
mod =NA
else
mod = as.numeric(names(ta)[ta==tam])
return (mod)
}
mode.imp <- function (a)
{
missing <- is.na(a)
a.obs <- a[!missing]
imputed <- a
imputed[missing] <- mode(a.obs)
return (imputed)
}
data3['education_level'] = mode.imp(data3['education_level'])
data3['company_size'] = mode.imp(data3['company_size'])
data3['last_new_job'] = mode.imp(data3['last_new_job'])
data3$gender = mode.imp(data3$gender)
model2 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data3)
summary(model2)
mean(abs(model1$coef -model2$coef)/abs(model1$coef))
random.imp <- function (a)
{
missing <- is.na(a)
n.missing <- sum(missing)
a.obs <- a[!missing]
imputed <- a
imputed[missing] <- as.numeric(sample (a.obs, n.missing, replace=TRUE))
return (imputed)
}
data4 = random.imp(data2)
model3 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data4)
summary(model3)
mean(abs(model1$coef -model3$coef)/abs(model3$coef))
str(data4)
summary(data4$gender)
summary(data2$gender)
summary(data4)
summary(data2)
sapply(data2, function(x) sum(is.na(x)))
#Generate missing values for training_hours depending on one variable
library(dplyr)
data_new = select(data,'relevent_experience','training_hours')
library(mice)
cont_cat = ampute(data_new,prop = 0.2,patterns=c(1,0),mech = "MAR")$amp
data2['training_hours'] = cont_cat['training_hours']
#check again for the generated missing values
sapply(data2, function(x) sum(is.na(x)))
data <-read.csv("C:/Users/joann/OneDrive/Desktop/missing data/week 2/aug_train.csv",
na.strings = "")
str(data)
library(plyr)
#for relevent_experience
data$relevent_experience <- revalue(data$relevent_experience,
c("Has relevent experience"=1))
data$relevent_experience <- revalue(data$relevent_experience,
c("No relevent experience"=0))
data$relevent_experience <-as.numeric(data$relevent_experience)
#for gender
data$gender <-as.numeric(factor(data$gender, levels = c("Male","Female","Other")))
#for enrolled_university
data$enrolled_university <- revalue(data$enrolled_university,
c("no_enrollment"=0))
data$enrolled_university <- revalue(data$enrolled_university,
c("Part time course"=1))
data$enrolled_university <- revalue(data$enrolled_university,
c("Full time course" = 2))
data$enrolled_university <-as.numeric(data$enrolled_university)
#for education_level
data$education_level <- as.numeric(factor(data$education_level,
levels = c("Primary School",
"High School","Graduate","Masters","Phd")))
#for experience
data$experience <- revalue(data$experience, c("<1"=0))
data$experience <- revalue(data$experience, c(">20"=21))
data$experience<-as.numeric(data$experience)
#for company size
data$company_size <- as.numeric(factor(data$company_size, levels = c("<10",
"10/49","50-99" ,"100-500","500-999",
"1000-4999","5000-9999", "10000+" )))
#for last_new_job
data$last_new_job <- revalue(data$last_new_job, c("never"=0))
data$last_new_job <- revalue(data$last_new_job, c(">4"=5))
data$last_new_job <-as.numeric(data$last_new_job)
#I will keep the variables that can be used for my analysis
library(dplyr)
data2 = select(data,-c('enrollee_id','city'))
#delet the 65 NA observations for experience
data2=data2[!is.na(data2$experience), ]
summary(data2)
#Generate missing values for training_hours depending on one variable
library(dplyr)
data_new = select(data,'relevent_experience','training_hours')
library(mice)
cont_cat = ampute(data_new,prop = 0.2,patterns=c(1,0),mech = "MAR")$amp
data2['training_hours'] = cont_cat['training_hours']
#check again for the generated missing values
sapply(data2, function(x) sum(is.na(x)))
summary(data2)
table(sapply(data2, function(x) sum(is.na(x))))
data4 = data2
random.imp <- function (a)
{
missing <- is.na(a)
n.missing <- sum(missing)
a.obs <- a[!missing]
imputed <- a
imputed[missing] <- as.numeric(sample (a.obs, n.missing, replace=TRUE))
return (imputed)
}
data4$gender = random.imp(data2$gender)
data4$education_level = random.imp(data2$education_level)
data4$company_size = random.imp(data2$company_size)
data4$last_new_job = random.imp(data2$last_new_job)
data4$enrolled_university= random.imp(data2$enrolled_university)
data4$training_hours = random.imp(data2$training_hours)
model3 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data4)
summary(model3)
mean(abs(model1$coef -model3$coef)/abs(model3$coef))
#copy data set
data5 = data2
#dummy variable imputation on training_hours
data5['training_hours']=mean.imp(data5['training_hours'])
d1 = is.na(data2$training_hours)
#dummy variable imputation on other categorical variables
data5$gender = mode.imp(data5$gender)
data5['education_level'] = mode.imp(data5['education_level'])
data5['company_size'] = mode.imp(data5['company_size'])
data5['last_new_job'] = mode.imp(data5['last_new_job'])
data5['enrolled_university'] = mode.imp(data5['enrolled_university'])
d2 = is.na(data2$gender)
d3 = is.na(data2$education_level)
d4 = is.na(data2$company_size)
d5 = is.na(data2$last_new_job)
d6 = is.na(data2$enrolled_university)
model4 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience+d1+d2+d3+d4+d5+d6,data = data5)
summary(model4)
mean(abs(model1$coef -model4$coef[1:10])/abs(model1$coef))
#copy data set
data6 = data2
#variables without missing values are: target,experience,enrolled_university and relevent_experience
#Missing data indicator
Ry = as.numeric(!is.na(data6$training_hours))
data.cc = data6[Ry ==1, ]
data.dropped = data6[Ry ==0, ]
reg = lm(training_hours ~relevent_experience+target+experience+enrolled_university,data = data.cc)
y.imp = predict(reg, newdata = data.dropped)
data6$training_hours[Ry == 0] = y.imp
#copy data set
data6 = data2
#variables without missing values are: target,experience,enrolled_university and relevent_experience
#Missing data indicator
Ry = as.numeric(!is.na(data6$training_hours))
data.cc = data6[Ry ==1, ]
data.dropped = data6[Ry ==0, ]
reg = lm(training_hours ~relevent_experience+target+experience,data = data.cc)
y.imp = predict(reg, newdata = data.dropped)
data6$training_hours[Ry == 0] = y.imp
#for categorical variables
#select the complete variables
x<- select(data6,'relevent_experience','target','experience')
#use polytomous regression for categorical variables that are not dichotomous
Ry1 = as.numeric(!is.na(data6$gender))
gender.imp = mice.impute.polyreg(data6$gender, !is.na(data6$gender), x)
# Impute the predictions where they belong:
data6$gender[Ry1 == 0] = gender.imp
#use another function from the mice package for ordered categorical variables
Ry2 = as.numeric(!is.na(data6$education_level))
edu.imp = mice.impute.polr(data6$education_level, !is.na(data6$education_level), x)
# Impute the predictions where they belong:
data6$education_level[Ry2 == 0] = edu.imp
Ry3 = as.numeric(!is.na(data6$enrolled_university))
enu.imp = mice.impute.polr(data6$enrolled_university, !is.na(data6$enrolled_university), x)
# Impute the predictions where they belong:
data6$education_level[Ry3 == 0] = enu.imp
Ry4 = as.numeric(!is.na(data6$company_size))
comp.imp = mice.impute.polr(data6$company_size, !is.na(data6$company_size), x)
# Impute the predictions where they belong:
data6$company_size[Ry4 == 0] = comp.imp
Ry5 = as.numeric(!is.na(data6$last_new_job))
lnj.imp = mice.impute.polr(data6$last_new_job, !is.na(data6$last_new_job), x)
# Impute the predictions where they belong:
data6$last_new_job[Ry5 == 0] = lnj.imp
#the missing values in the categorical variables are omitted for the analysis
model6 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data6)
summary(model6)
mean(abs(model1$coef -model6$coef)/abs(model6$coef))
#for categorical variables
#select the complete variables
x<- select(data6,'relevent_experience','target','experience')
#use polytomous regression for categorical variables that are not dichotomous
Ry1 = as.numeric(!is.na(data6$gender))
gender.imp = mice.impute.polyreg(data6$gender, !is.na(data6$gender), x)
#copy data set
data6 = data2
#variables without missing values are: target,experience and relevent_experience
#Missing data indicator
Ry = as.numeric(!is.na(data6$training_hours))
data.cc = data6[Ry ==1, ]
data.dropped = data6[Ry ==0, ]
reg = lm(training_hours ~relevent_experience+target+experience,data = data.cc)
y.imp = predict(reg, newdata = data.dropped)
data6$training_hours[Ry == 0] = y.imp
#for categorical variables
#select the complete variables
x<- select(data6,'relevent_experience','target','experience')
#use polytomous regression for categorical variables that are not dichotomous
Ry1 = as.numeric(!is.na(data6$gender))
gender.imp = mice.impute.polyreg(data6$gender, !is.na(data6$gender), x)
# Impute the predictions where they belong:
data6$gender[Ry1 == 0] = gender.imp
#use another function from the mice package for ordered categorical variables
Ry2 = as.numeric(!is.na(data6$education_level))
edu.imp = mice.impute.polr(data6$education_level, !is.na(data6$education_level), x)
# Impute the predictions where they belong:
data6$education_level[Ry2 == 0] = as.numeric(edu.imp)
Ry3 = as.numeric(!is.na(data6$enrolled_university))
enu.imp = mice.impute.polr(data6$enrolled_university, !is.na(data6$enrolled_university), x)
# Impute the predictions where they belong:
data6$education_level[Ry3 == 0] = as.numeric(enu.imp)
Ry4 = as.numeric(!is.na(data6$company_size))
comp.imp = mice.impute.polr(data6$company_size, !is.na(data6$company_size), x)
# Impute the predictions where they belong:
data6$company_size[Ry4 == 0] =as.numeric(comp.imp)
Ry5 = as.numeric(!is.na(data6$last_new_job))
lnj.imp = mice.impute.polr(data6$last_new_job, !is.na(data6$last_new_job), x)
# Impute the predictions where they belong:
data6$last_new_job[Ry5 == 0] = as.numeric(lnj.imp)
#the missing values in the categorical variables are omitted for the analysis
model6 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data6)
summary(model6)
mean(abs(model1$coef -model6$coef)/abs(model6$coef))
#we don't have dichotomous categorical variables, so we only add noise to the numeric variable
data7 = data6
data7$training_hours = data2$training_hours
noise = rnorm(length(y.imp), 0, summary(reg)$sigma)
y.imps = y.imp + noise
data7$training_hours[Ry == 0] = y.imps
summary(data7)
summary(data6)
#copy data set
data6 = data2
#variables without missing values are: target,experience and relevent_experience
#Missing data indicator
Ry = as.numeric(!is.na(data6$training_hours))
data.cc = data6[Ry ==1, ]
data.dropped = data6[Ry ==0, ]
reg = lm(training_hours ~relevent_experience+target+experience,data = data.cc)
y.imp = predict(reg, newdata = data.dropped)
data6$training_hours[Ry == 0] = y.imp
#for categorical variables
#select the complete variables
x<- select(data6,'relevent_experience','target','experience')
#use polytomous regression for categorical variables that are not dichotomous
Ry1 = as.numeric(!is.na(data6$gender))
gender.imp = mice.impute.polyreg(data6$gender, !is.na(data6$gender), x)
# Impute the predictions where they belong:
data6$gender[Ry1 == 0] = gender.imp
#use another function from the mice package for ordered categorical variables
Ry2 = as.numeric(!is.na(data6$education_level))
edu.imp = mice.impute.polr(data6$education_level, !is.na(data6$education_level), x)
# Impute the predictions where they belong:
data6$education_level[Ry2 == 0] = as.numeric(edu.imp)
Ry3 = as.numeric(!is.na(data6$enrolled_university))
enu.imp = mice.impute.polr(data6$enrolled_university, !is.na(data6$enrolled_university), x)
# Impute the predictions where they belong:
data6$enrolled_university[Ry3 == 0] = as.numeric(enu.imp)
Ry4 = as.numeric(!is.na(data6$company_size))
comp.imp = mice.impute.polr(data6$company_size, !is.na(data6$company_size), x)
# Impute the predictions where they belong:
data6$company_size[Ry4 == 0] =as.numeric(comp.imp)
Ry5 = as.numeric(!is.na(data6$last_new_job))
lnj.imp = mice.impute.polr(data6$last_new_job, !is.na(data6$last_new_job), x)
# Impute the predictions where they belong:
data6$last_new_job[Ry5 == 0] = as.numeric(lnj.imp)
#the missing values in the categorical variables are omitted for the analysis
model6 = lm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data6)
summary(model6)
mean(abs(model1$coef -model6$coef)/abs(model6$coef))
#we don't have dichotomous categorical variables, so we only add noise to the numeric variable
data7 = data6
data7$training_hours = data2$training_hours
noise = rnorm(length(y.imp), 0, summary(reg)$sigma)
y.imps = y.imp + noise
data7$training_hours[Ry == 0] = y.imps
summary(data7)
#the missing values in the categorical variables are omitted for the analysis
model7 = lm(target ~ training_hours+gender+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data7)
summary(model7)
mean(abs(model1$coef -model7$coef)/abs(model7$coef))
library(mi)
# Create the missing data frame object
mdf = missing_data.frame(data2)
# Examine the default settings
show(mdf)
# Five-number summary statistics + missing number
summary(mdf)
# Histograms of all variables with missing values
hist(mdf)
mdf <- change(mdf, y = "last_new_job", what = "type", to = "ordered-categorical")
mdf <- change(mdf, y = "company_size", what = "type", to = "ordered-categorical")
mdf <- change(mdf, y = "gender", what = "type", to = "unorder")
mdf <- change(mdf, y = "training_hours", what = "type", to = "pos")
show(mdf)
#Run mi with 5 chains and 50 iterations on the dataset
# Running the chains
imputations <- mi(mdf, n.chains = 5, n.iter=50)
#Check convergence/diagnostics and make changes if necessary
round(mipply(imputations, mean, to.matrix = TRUE), 3)
converged <- mi2BUGS(imputations)
Rhats(imputations)
mean_g = converged[, , 1]
# Traceplot of mean imputed training hours
ts.plot(mean_th[,1], col=1)
mean_g = converged[, , 1]
# Traceplot of mean imputed training hours
ts.plot(mean_g[,1], col=1)
lines(mean_g[,2], col= 2)
lines(mean_g[,3], col= 3)
lines(mean_g [,4], col= 4)
lines(mean_g [,5], col= 5)
mean_eu = converged[, , 3]
# Traceplot of mean imputed last new job
ts.plot(mean_eu[,1], col=1)
lines(mean_eu[,2], col= 2)
lines(mean_eu[,3], col= 3)
lines(mean_eu [,4], col= 4)
lines(mean_eu[,5], col= 5)
mean_el = converged[, , 4]
# Traceplot of mean imputed last new job
ts.plot(mean_el[,1], col=1)
lines(mean_el[,2], col= 2)
lines(mean_el[,3], col= 3)
lines(mean_el [,4], col= 4)
lines(mean_el [,5], col= 5)
mean_cs = converged[, , 6]
# Traceplot of mean imputed last new job
ts.plot(mean_cs[,1], col=1)
lines(mean_cs[,2], col= 2)
lines(mean_cs[,3], col= 3)
lines(mean_cs [,4], col= 4)
lines(mean_cs[,5], col= 5)
mean_l = converged[, , 7]
# Traceplot of mean imputed last new job
ts.plot(mean_l[,1], col=1)
lines(mean_l[,2], col= 2)
lines(mean_l[,3], col= 3)
lines(mean_l [,4], col= 4)
lines(mean_l [,5], col= 5)
mean_th = converged[, , 8]
# Traceplot of mean imputed last new job
ts.plot(mean_th[,1], col=1)
lines(mean_th[,2], col= 2)
lines(mean_th[,3], col= 3)
lines(mean_th [,4], col= 4)
lines(mean_th[,5], col= 5)
#check for the plots
plot(imputations)
install.packages("HotDeckImputation")
library(HotDeckImputation)
plot(imputations)
install.packages("HotDeckImputation")
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,imputations)
mean(abs(model1$coef - coef(model8))/abs(model1$coef))
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,imputations)
display(model8)
#mean(abs(model1$coef - coef(model8))/abs(model1$coef))
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+as.numeric(last_new_job)+
as.numeric(enrolled_university)+as.numeric(education_level)+as.numeric(company_size)+experience,imputations)
display(model8)
#mean(abs(model1$coef - coef(model8))/abs(model1$coef))
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+as.numeric(last_new_job)+
as.numeric(enrolled_university)+as.numeric(education_level)+as.numeric(company_size)+experience,imputations)
display(model8)
mean(abs(model1$coef - coef(model8))/abs(model1$coef))
glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data2, family = binomial())
g<-glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
+         enrolled_university+education_level+company_size+experience,data = data2, family = binomial())
g$coefficients
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+as.numeric(last_new_job)+
as.numeric(enrolled_university)+as.numeric(education_level)+as.numeric(company_size)+experience,family=binomial(),imputations)
display(model8)
mean(abs(model1$coef - coef(model8))/abs(model1$coef))
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+as.numeric(last_new_job)+
as.numeric(enrolled_university)+as.numeric(education_level)+as.numeric(company_size)+experience,family=binomial(),imputations)
display(model8)
mean(abs(g$coef - coef(model8))/abs(g$coef))
#listwise deletion based on the original data set
data_complete = na.omit(data)
model1 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
+ +         enrolled_university+education_level+company_size+experience,data = data_complete, family = binomial())
summary(model1)
model2 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data3,family=binomial())
summary(model2)
mean(abs(model1$coef -model2$coef)/abs(model1$coef))
model3 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,family=binomial(),data = data4)
summary(model3)
mean(abs(model1$coef -model3$coef)/abs(model3$coef))
model4 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience+d1+d2+d3+d4+d5+d6,data = data5,family=binomial())
summary(model4)
mean(abs(model1$coef -model4$coef[1:10])/abs(model1$coef))
#the missing values in the categorical variables are omitted for the analysis
model6 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data6,family=binomial())
summary(model6)
mean(abs(model1$coef -model6$coef)/abs(model6$coef))
#the missing values in the categorical variables are omitted for the analysis
model7 = glm(target ~ training_hours+gender+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data7,family=binomial())
summary(model7)
mean(abs(model1$coef -model7$coef)/abs(model7$coef))
#Pool the results and report the estimated equation
model8 = mi::pool(target ~ training_hours+factor(gender)+relevent_experience+as.numeric(last_new_job)+
as.numeric(enrolled_university)+as.numeric(education_level)+as.numeric(company_size)+experience,family=binomial(),imputations)
display(model8)
mean(abs(model1$coef - coef(model8))/abs(model1$coef))
install.packages(HotDeckImputation)
install.packages("HotDeckImputation")
install.packages('rrp')
install.packages("C:/Users/joann/Downloads/HotDeckImputation_1.1.0.tar.gz", repos = NULL, type = "source")
libarary(HotDeckImputation)
library(HotDeckImputation)
install.packages("C:/Users/joann/Downloads/HotDeckImputation_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/joann/Downloads/HotDeckImputation_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("simputation")
unlink(‘C:\Users\joann\OneDrive\Documents\R\win-library\4.0/00LOCK’, recursive = TRUE)
unlink("C:\Users\joann\OneDrive\Documents\R\win-library\4.0/00LOCK", recursive = TRUE)
unlink("C:/Users/joann/OneDrive/Documents/R/win-library/4.0/00LOCK", recursive = TRUE)
install.packages("simputation")
install.packages("VIM")
data_h = data2
library(VIM)
summary(sleep)
library(laeken)
library(VIM)
data_h = data2
kNN(data_h,k=1,imp_var=F)
library(VIM)
data_h = data2
data_h = kNN(data_h,k=1,imp_var=F)
summary(data_h)
model5 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data_h,family=binomial())
summary(model5)
mean(abs(model5$coef -model4$coef)/abs(model5$coef))
model5$coefficients
model5 = glm(target ~ training_hours+factor(gender)+relevent_experience+last_new_job+
enrolled_university+education_level+company_size+experience,data = data_h,family=binomial())
summary(model5)
mean(abs(model1$coef -model5$coef)/abs(model1$coef))
knitr::opts_chunk$set(echo = TRUE)
#Generate missing values for training_hours depending on one variable
library(dplyr)
data_new = select(data2,'experience','training_hours')
library(mice)
set.seed(102)
cont_cat = ampute(data_new,prop = 0.2,patterns=c(1,0),mech = "MAR")$amp
#I will keep the variables that can be used for my analysis
library(dplyr)
data2 = select(data,-c('enrollee_id','city'))
#delete the 65 NA observations for experience
data2=data2[!is.na(data2$experience), ]
#Generate missing values for training_hours depending on one variable
library(dplyr)
data_new = select(data2,'experience','training_hours')
library(mice)
set.seed(102)
cont_cat = ampute(data_new,prop = 0.2,patterns=c(1,0),mech = "MAR")$amp
data2['training_hours'] = cont_cat['training_hours']
data <-read.csv("C:/Users/joann/OneDrive/Desktop/missing data/week 2/aug_train.csv",
na.strings = "")
str(data)
summary(na.omit(data))
